/* The following code was generated by JFlex 1.7.0 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>html.flex</tt>
 */
class html {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ABSTRACT = 2;
  public static final int CLAIMS = 4;
  public static final int TITLE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\5\1\60\1\60\1\5\22\0\1\12\1\0\1\21"+
    "\2\0\1\27\5\0\1\43\1\2\2\0\1\31\1\26\1\44\3\1"+
    "\1\25\4\1\1\57\1\0\1\6\1\20\1\7\2\0\1\13\1\30"+
    "\1\45\1\11\1\32\1\3\1\16\1\23\1\15\2\3\1\14\1\3"+
    "\1\17\1\3\1\52\1\3\1\22\1\3\1\10\2\3\1\24\3\3"+
    "\6\0\1\50\1\46\1\51\1\56\1\42\1\33\1\3\1\53\1\40"+
    "\2\3\1\54\1\55\1\35\1\34\2\3\1\47\1\37\1\36\5\3"+
    "\1\41\12\0\1\60\32\0\1\4\u15df\0\1\4\u097f\0\13\4\35\0"+
    "\1\60\1\60\5\0\1\4\57\0\1\4\u0fa0\0\1\4\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\4\1\1\2\1\3\2\1\1\3\1\1\12\0"+
    "\1\3\12\0\1\3\6\0\1\4\2\0\1\5\1\3"+
    "\10\0\1\3\10\0\1\3\10\0\1\3\1\6\6\0"+
    "\1\1\1\3\6\0\1\3\6\0\1\3\6\0\1\3"+
    "\6\0\1\3\6\0\1\3\6\0\1\3\6\0\1\3"+
    "\1\0\1\7\3\0\1\3\4\0\1\3\4\0\1\3"+
    "\2\0\1\10\1\0\1\10\40\0\1\1\5\0\1\11"+
    "\34\0\1\12\22\0\1\13";

  private static int [] zzUnpackAction() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\304\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be"+
    "\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746"+
    "\0\u0777\0\u07a8\0\304\0\u07d9\0\u080a\0\304\0\u083b\0\u086c"+
    "\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4"+
    "\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c"+
    "\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04"+
    "\0\u0d35\0\u0d66\0\304\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b"+
    "\0\u0e8c\0\u0df9\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2"+
    "\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a"+
    "\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2"+
    "\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a"+
    "\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2"+
    "\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a"+
    "\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u184f\0\304\0\u1880\0\u18b1"+
    "\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39"+
    "\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\304\0\u1b90"+
    "\0\u0188\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7"+
    "\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f"+
    "\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7"+
    "\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u214e\0\u217f"+
    "\0\u21b0\0\u217f\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5\0\304"+
    "\0\u22d6\0\u2307\0\u2338\0\u2369\0\u239a\0\u23cb\0\u23fc\0\u242d"+
    "\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522\0\u2553\0\u2584\0\u25b5"+
    "\0\u25e6\0\u2617\0\u2648\0\u2679\0\u26aa\0\u26db\0\u270c\0\u273d"+
    "\0\u276e\0\u279f\0\u27d0\0\u2801\0\304\0\u2832\0\u2863\0\u2894"+
    "\0\u28c5\0\u28f6\0\u2927\0\u2958\0\u2989\0\u29ba\0\u29eb\0\u2a1c"+
    "\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11\0\u2b42\0\u2b73\0\304";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\5\5\1\6\1\7\3\5\1\6\11\5\1\10\33\5"+
    "\1\11\6\12\1\13\60\12\1\14\15\12\1\15\42\12"+
    "\1\16\52\12\66\0\1\6\4\0\1\6\56\0\1\17"+
    "\22\0\1\20\11\0\1\21\66\0\1\22\5\0\6\12"+
    "\1\0\52\12\7\23\1\0\1\24\20\23\1\25\1\23"+
    "\1\26\11\23\1\27\22\23\1\0\1\24\12\23\1\30"+
    "\7\23\1\26\11\23\1\27\13\23\6\12\1\0\44\12"+
    "\1\31\5\12\7\23\1\0\1\24\20\23\1\32\1\23"+
    "\1\26\11\23\1\27\13\23\11\0\1\33\103\0\1\34"+
    "\56\0\1\35\76\0\1\36\10\0\7\23\1\5\60\23"+
    "\1\5\1\23\1\37\56\23\1\5\42\23\1\40\15\23"+
    "\1\5\24\23\1\41\33\23\1\5\22\23\1\42\35\23"+
    "\1\5\12\23\1\43\36\23\6\12\1\0\41\12\1\44"+
    "\10\12\7\23\1\5\23\23\1\45\25\23\12\0\1\46"+
    "\103\0\1\47\42\0\1\50\77\0\1\51\22\0\7\23"+
    "\1\5\2\23\1\52\55\23\1\53\60\23\1\5\25\23"+
    "\1\54\32\23\1\5\7\23\1\55\50\23\1\56\51\23"+
    "\6\12\1\0\27\12\1\57\22\12\7\23\1\5\24\23"+
    "\1\60\24\23\13\0\1\61\103\0\1\62\32\0\1\63"+
    "\62\0\1\64\46\0\7\23\1\5\3\23\1\65\54\23"+
    "\1\5\26\23\1\66\31\23\1\5\1\67\50\23\6\12"+
    "\1\0\3\12\1\70\46\12\7\23\1\5\25\23\1\71"+
    "\23\23\14\0\1\72\56\0\1\73\100\0\1\74\66\0"+
    "\1\75\20\0\7\23\1\5\4\23\1\76\53\23\1\5"+
    "\2\23\1\77\55\23\1\5\22\23\1\100\26\23\6\12"+
    "\1\0\31\12\1\101\20\12\7\23\1\5\26\23\1\102"+
    "\22\23\15\0\1\103\102\0\1\104\43\0\1\105\75\0"+
    "\1\106\21\0\7\23\1\5\5\23\1\107\52\23\1\5"+
    "\27\23\1\110\30\23\1\5\12\23\1\111\36\23\6\12"+
    "\1\0\30\12\1\112\21\12\7\23\1\113\51\23\16\0"+
    "\1\114\102\0\1\115\27\0\1\116\63\0\1\117\46\0"+
    "\7\23\1\5\6\23\1\120\51\23\1\5\30\23\1\121"+
    "\27\23\1\122\51\23\6\12\1\0\3\12\1\123\46\12"+
    "\17\0\1\124\102\0\1\125\25\0\1\126\123\0\1\127"+
    "\7\0\7\23\1\5\7\23\1\130\50\23\1\5\31\23"+
    "\1\131\17\23\6\12\1\0\42\12\1\132\7\12\20\0"+
    "\1\133\102\0\1\134\46\0\1\135\104\0\1\136\4\0"+
    "\7\23\1\5\10\23\1\137\47\23\1\5\32\23\1\140"+
    "\16\23\6\12\1\0\45\12\1\141\4\12\21\0\1\142"+
    "\57\0\1\143\47\0\1\144\121\0\1\145\10\0\7\23"+
    "\1\5\11\23\1\146\46\23\1\5\10\23\1\147\40\23"+
    "\6\12\1\0\41\12\1\150\10\12\22\0\1\151\57\0"+
    "\1\152\52\0\1\153\105\0\1\154\20\0\7\23\1\5"+
    "\12\23\1\155\45\23\1\5\11\23\1\156\37\23\6\12"+
    "\1\0\31\12\1\157\20\12\15\0\1\160\106\0\1\161"+
    "\63\0\1\162\67\0\1\163\3\0\7\23\1\5\5\23"+
    "\1\164\52\23\1\5\33\23\1\165\15\23\6\12\1\0"+
    "\46\12\1\166\3\12\16\0\1\167\106\0\1\170\53\0"+
    "\1\171\63\0\1\172\16\0\7\23\1\5\6\23\1\173"+
    "\51\23\1\5\34\23\1\174\14\23\6\12\1\0\33\12"+
    "\1\175\16\12\23\0\1\176\56\0\1\177\75\0\1\200"+
    "\100\0\1\201\2\0\7\23\1\5\13\23\1\202\44\23"+
    "\1\5\11\23\1\203\37\23\6\12\1\0\47\12\1\204"+
    "\2\12\10\0\1\205\57\0\1\206\120\0\1\207\23\0"+
    "\1\210\46\0\7\23\1\5\1\211\57\23\1\206\51\23"+
    "\6\12\1\0\3\12\1\212\46\12\21\0\1\213\107\0"+
    "\1\214\50\0\1\215\20\0\7\23\1\5\11\23\1\216"+
    "\37\23\6\12\1\0\31\12\1\217\20\12\12\0\1\220"+
    "\117\0\1\221\46\0\1\222\21\0\7\23\1\5\2\23"+
    "\1\223\46\23\6\12\1\0\30\12\1\224\21\12\24\0"+
    "\1\225\72\0\1\226\101\0\1\227\1\0\7\23\1\5"+
    "\14\23\1\230\34\23\6\12\1\0\50\12\1\231\1\12"+
    "\15\0\1\232\51\0\1\233\52\0\7\23\1\5\5\23"+
    "\1\234\43\23\11\0\1\235\100\0\1\236\27\0\7\23"+
    "\1\5\1\23\1\237\47\23\10\0\1\240\100\0\1\241"+
    "\30\0\7\23\1\5\1\242\50\23\23\0\1\243\44\0"+
    "\1\244\51\0\7\23\1\5\13\23\1\245\35\23\20\0"+
    "\1\246\46\0\1\247\52\0\7\23\1\5\10\23\1\250"+
    "\40\23\21\0\1\251\70\0\1\252\27\0\7\23\1\5"+
    "\11\23\1\253\37\23\25\0\1\254\100\0\1\255\13\0"+
    "\7\23\1\5\15\23\1\256\33\23\26\0\1\257\64\0"+
    "\1\260\26\0\7\23\1\5\16\23\1\261\32\23\27\0"+
    "\1\262\50\0\1\263\41\0\7\23\1\5\17\23\1\264"+
    "\31\23\21\0\1\265\47\0\1\266\50\0\7\23\1\5"+
    "\11\23\1\267\37\23\7\0\1\270\103\0\1\271\26\0"+
    "\7\23\1\272\51\23\6\0\1\273\3\0\1\274\70\0"+
    "\1\275\66\0\1\276\36\0\1\277\61\0\1\300\60\0"+
    "\1\301\101\0\1\302\31\0\1\303\23\0\2\303\15\0"+
    "\1\303\23\0\1\304\52\0\1\303\1\305\22\0\2\303"+
    "\15\0\1\303\17\0\1\306\4\0\2\306\1\0\5\306"+
    "\2\0\3\306\3\0\1\306\1\0\11\306\2\0\12\306"+
    "\3\0\1\307\23\0\2\307\15\0\1\307\17\0\1\306"+
    "\2\310\2\0\2\306\1\310\5\306\2\0\3\306\3\0"+
    "\1\306\1\0\11\306\2\0\12\306\1\0\1\310\1\0"+
    "\1\307\1\311\22\0\2\307\15\0\1\307\15\0\1\312"+
    "\23\0\2\312\15\0\1\312\15\0\1\313\23\0\2\313"+
    "\15\0\1\313\16\0\1\314\57\0\1\313\4\0\1\315"+
    "\16\0\2\313\15\0\1\313\20\0\2\316\4\0\1\316"+
    "\45\0\1\316\31\0\1\317\30\0\1\320\23\0\2\320"+
    "\15\0\1\320\44\0\1\321\31\0\1\322\23\0\2\322"+
    "\15\0\1\322\23\0\1\323\52\0\1\324\23\0\2\324"+
    "\15\0\1\324\22\0\1\325\53\0\1\326\23\0\2\326"+
    "\15\0\1\326\45\0\1\327\35\0\1\330\62\0\1\331"+
    "\101\0\1\332\40\0\1\333\77\0\1\334\37\0\1\335"+
    "\60\0\1\336\57\0\1\337\103\0\1\340\37\0\1\341"+
    "\61\0\1\342\56\0\1\343\57\0\1\344\103\0\1\345"+
    "\37\0\1\346\72\0\1\347\45\0\1\350\57\0\1\351"+
    "\103\0\1\352\37\0\1\353\63\0\1\354\75\0\1\355"+
    "\44\0\1\356\76\0\1\357\35\0\1\360\51\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11172];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\3\1\1\11\5\1\12\0\1\1\12\0"+
    "\1\1\6\0\1\11\2\0\1\11\1\1\10\0\1\1"+
    "\10\0\1\1\10\0\1\1\1\11\6\0\2\1\6\0"+
    "\1\1\6\0\1\1\6\0\1\1\6\0\1\1\6\0"+
    "\1\1\6\0\1\1\6\0\1\1\1\0\1\11\3\0"+
    "\1\1\4\0\1\1\4\0\1\1\2\0\1\11\1\0"+
    "\1\1\40\0\1\1\5\0\1\11\34\0\1\11\22\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuilder buffer = new StringBuilder();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  html(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 210) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 12: break;
          case 2: 
            { System.out.print(yytext());
            } 
            // fall through
          case 13: break;
          case 3: 
            { buffer.append(yytext().trim()).append(" ");
            } 
            // fall through
          case 14: break;
          case 4: 
            { System.out.println("Resumo: " + buffer.toString().replaceAll("<[^>]*>", "").trim());
    yybegin(YYINITIAL);
            } 
            // fall through
          case 15: break;
          case 5: 
            { System.out.println("Reivindicações: " + buffer.toString().replaceAll("<[^>]*>", "").trim());
    yybegin(YYINITIAL);
            } 
            // fall through
          case 16: break;
          case 6: 
            { System.out.println("Título: " + buffer.toString().trim());
    yybegin(YYINITIAL);
            } 
            // fall through
          case 17: break;
          case 7: 
            { buffer.setLength(0);
    yybegin(TITLE);
            } 
            // fall through
          case 18: break;
          case 8: 
            { buffer.setLength(0);
    yybegin(CLAIMS);
            } 
            // fall through
          case 19: break;
          case 9: 
            { buffer.setLength(0);
    yybegin(ABSTRACT);
            } 
            // fall through
          case 20: break;
          case 10: 
            { String texto = yytext();
    String numero = texto.replaceAll("<[^>]*>", "").trim();
    System.out.println("Número da patente: " + numero);
            } 
            // fall through
          case 21: break;
          case 11: 
            { String texto = yytext();
    String data = texto.replaceAll("<[^>]*>", "").trim();
    System.out.println("Data de publicação: " + data);
            } 
            // fall through
          case 22: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java html [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        html scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new html(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
